{"version":3,"sources":["Constants.js","Spirograph.js","App.js","serviceWorker.js","index.js"],"names":["Constants","minValues","samples","pointsXlap","containerRadius","discRadius","maxValues","parametrizationMarks","1","2","samplesMarks","3","4","5","6","7","8","9","10","canvasLength","ID","TwoPi","Math","PI","getMaxPoints","disc","gcd","a","b","getDiscRadius","discRadiuses","i","maxPoints","push","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","anglexStep","state","points","oldPaths","actualPath","d","id","color","concat","hue","luminosity","angleSpirograph","angleDisc","containerCenter","discCenter","angleDiscXstep","stop","frame","prevProps","_this2","changed","cleanInterruptor","setState","_this$props","holeDistance","parametrization","keys","length","deleteStoped","frameStoped","assign","objectSpread","deleteFrame","point","slice","x","y","P0","P1","Qx","Qy","_this3","paths","shift","split","splice","setTimeout","fps","_this4","_this$state","Xcenter","cos","Ycenter","sin","Xhole","Yhole","addPoint","floor","SVGprops","fill","strokeWidth","strokeLinejoin","strokeLinecap","react_default","createElement","className","viewBox","map","o","key","join","stroke","React","Component","Handle","Slider","handle","value","dragging","index","restProps","objectWithoutProperties","rc_tooltip_es","prefixCls","overlay","visible","placement","samplesHandle","initialState","maxPointsXlap","discRadiusMarks","250","SpriographProps","changeSamples","values","maxSamples","getSamplesMark","changePointsXlap","changeDiscRadiusMarks","valueFound","find","v","changeDiscRadius","marks","forEach","maxHoleDistance","changeHoleDistance","_this5","es","defaultValue","min","max","onAfterChange","changeContainerRadius","step","onChange","style","backgroundColor","onClick","apply","Spirograph_App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8519f8d5.chunk.js","sourcesContent":["export default {\r\n  minValues: {\r\n    samples: 1,\r\n    pointsXlap: 0.01,\r\n    containerRadius: 10,\r\n    discRadius: 1,\r\n  },\r\n  maxValues: {\r\n    samples: 10,\r\n    pointsXlap: 45,\r\n    containerRadius: 500,\r\n  },\r\n  parametrizationMarks: {\r\n    1: 'linear',\r\n    2: 'quadratic',\r\n    //3: 'cubic'\r\n  },\r\n  samplesMarks: {\r\n    1: 3,\r\n    2: 10,\r\n    3: 20,\r\n    4: 50,\r\n    5: 100,\r\n    6: 200,\r\n    7: 500,\r\n    8: 1000,\r\n    9: 2000,\r\n    10: 5000\r\n  }\r\n}","import React from 'react'\r\nimport Constants from './Constants'\r\nimport './Spirograph.css'\r\n\r\nconst canvasLength = 1000\r\nlet ID = 1\r\nconst TwoPi = Math.PI*2\r\n\r\nconst gcd = (a,b) => {\r\n  return b ? gcd(b, a%b) : a;\r\n}\r\n\r\nconst getLaps = (cont, disc) => {\r\n  const divisor = gcd(cont,disc)\r\n  return disc/divisor\r\n}\r\n\r\nexport const getMaxPoints = (pointsXlap, discRadius, containerRadius) => {\r\n  return pointsXlap*getLaps(containerRadius, discRadius)\r\n}\r\n\r\nexport const getMaxPointsXlap = (maxSamples) => {\r\n  return maxSamples > Constants.maxValues.pointsXlap ? Constants.maxValues.pointsXlap : maxSamples\r\n}\r\n\r\nexport const getDiscRadius = (samples, pointsXlap, containerRadius) => {\r\n  const discRadiuses = []\r\n  for (let i = 1; i <= containerRadius; i++) {\r\n    const maxPoints = getMaxPoints(pointsXlap, i, containerRadius)\r\n    if (maxPoints <= samples[1] && maxPoints >= samples[0]) {\r\n      discRadiuses.push(i)\r\n    }\r\n  }\r\n  return discRadiuses\r\n}\r\n\r\nexport default class App extends React.Component {\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    const anglexStep = (360/props.pointsXlap) * (Math.PI/180)\r\n    this.state = {\r\n      points: [],\r\n      oldPaths: [],\r\n      actualPath: {\r\n        d: [],\r\n        id: 1,\r\n        color: `hsl(${props.hue}, 100%, ${props.luminosity}%)`\r\n      },\r\n      angleSpirograph: 0,\r\n      angleDisc: 0,\r\n      containerCenter: canvasLength*0.5,\r\n      anglexStep,\r\n      discCenter: props.containerRadius - this.props.discRadius,\r\n      angleDiscXstep: anglexStep * props.containerRadius / this.props.discRadius,\r\n      samples: getMaxPoints(props.pointsXlap, props.discRadius, props.containerRadius),\r\n      stop: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.frame()\r\n  }\r\n\r\n  componentDidUpdate (prevProps) {\r\n    let changed = {}\r\n    if (prevProps.cleanInterruptor !== this.props.cleanInterruptor) {\r\n      this.setState({oldPaths: []})\r\n      if (this.state.stop) {\r\n        this.setState({actualPath: {\r\n          d: [],\r\n          id: ++ID,\r\n          color: `hsl(${this.props.hue}, 100%, ${this.props.luminosity}%)`\r\n        },\r\n        points: []})\r\n      }\r\n    }\r\n    if (prevProps.discRadius !== this.props.discRadius\r\n      || this.props.containerRadius !== prevProps.containerRadius) {\r\n      const { discRadius, containerRadius } = this.props\r\n      changed.discCenter= containerRadius - discRadius\r\n      changed.angleDiscXstep= this.state.anglexStep * containerRadius / discRadius\r\n    }\r\n    if (this.props.pointsXlap !== prevProps.pointsXlap) {\r\n      const anglexStep = (360/this.props.pointsXlap) * (Math.PI/180)\r\n      changed.anglexStep = anglexStep\r\n      changed.angleDiscXstep = anglexStep * this.props.containerRadius / this.props.discRadius\r\n      \r\n    }\r\n    if (this.props.holeDistance !== prevProps.holeDistance\r\n      || this.props.parametrization !== prevProps.parametrization\r\n      || this.props.hue !== prevProps.hue\r\n      || this.props.luminosity !== prevProps.luminosity) {\r\n      // force a change\r\n      changed.stop = false\r\n    }\r\n\r\n    if (Object.keys(changed).length > 0) {\r\n      const deleteStoped = this.state.oldPaths.length === 0\r\n      const frameStoped = this.state.stop\r\n      changed.samples = getMaxPoints(this.props.pointsXlap, this.props.discRadius, this.props.containerRadius)\r\n      changed.stop= false\r\n      changed.oldPaths = this.state.oldPaths\r\n      changed.oldPaths.push(Object.assign({}, this.state.actualPath))\r\n      changed.actualPath = {\r\n        id: ++ID,\r\n        color: `hsl(${this.props.hue}, 100%, ${this.props.luminosity}%)`,\r\n        d: []\r\n      }\r\n      changed.points = []\r\n      this.setState({...changed}, () => {\r\n        if (frameStoped) this.frame()\r\n        if (deleteStoped) this.deleteFrame()\r\n      })\r\n    }\r\n  }\r\n\r\n  addPoint (point) {\r\n    const points = this.state.points.slice()\r\n    points.push(point)\r\n    const actualPath = this.state.actualPath\r\n    switch (this.props.parametrization) {\r\n      case 1:\r\n        if (points.length < 2) {\r\n          actualPath.d.push(`M ${point.x},${point.y} `)\r\n        }\r\n        else {\r\n          actualPath.d.push(`L ${point.x},${point.y} `)\r\n        }\r\n        break\r\n      case 2:\r\n        if (points.length > 2) {\r\n          const P0 = points[points.length - 3]\r\n          const P1 = points[points.length - 2]\r\n          const Qx = 0.25*P0.x + P1.x - 0.25*point.x\r\n          const Qy = 0.25*P0.y + P1.y - 0.25*point.y\r\n          actualPath.d.push(`Q ${Qx},${Qy} ${P1.x},${P1.y} `)\r\n        }\r\n        else {\r\n          if (points.length === 1) {\r\n            actualPath.d.push(`M ${point.x},${point.y} `)\r\n          }\r\n        }\r\n        break\r\n      default: break\r\n    }\r\n    this.setState({points, actualPath})\r\n  }\r\n\r\n  deleteFrame () {\r\n    let paths = this.state.oldPaths.slice()\r\n    for (let i = paths.length - 1; i >= 0; i--) {\r\n      paths[i].d.shift()\r\n      if (paths[i].d.length > 1) {\r\n        const d = paths[i].d[0].split(\" \")\r\n        paths[i].d[0] = \"M \" + d[d.length - 2]\r\n      }\r\n      else {\r\n        paths.splice(i, 1)\r\n      }\r\n    }\r\n    this.setState({oldPaths: paths}, () => {\r\n      if (this.state.oldPaths.length > 0) {\r\n        setTimeout(() => {\r\n          this.deleteFrame()\r\n        }, 1000/this.props.fps)\r\n      }\r\n    })\r\n  }\r\n\r\n  frame () {\r\n    const { angleSpirograph, containerCenter, discCenter, angleDisc, angleDiscXstep, anglexStep } = this.state\r\n    const { holeDistance } = this.props\r\n    const Xcenter = containerCenter + Math.cos(angleSpirograph)*discCenter;\r\n    const Ycenter = containerCenter - Math.sin(angleSpirograph)*discCenter;\r\n    const Xhole = Xcenter + Math.cos(-angleDisc)*holeDistance;\r\n    const Yhole = Ycenter - Math.sin(-angleDisc)*holeDistance;\r\n    this.addPoint({x: Math.floor(Xhole), y: Math.floor(Yhole)})\r\n    this.setState({\r\n      angleSpirograph: (angleSpirograph + anglexStep) % TwoPi,\r\n      angleDisc: (angleDisc + angleDiscXstep) % TwoPi},\r\n      () => {\r\n        if (this.state.actualPath.d.length !== this.state.samples + 1) {\r\n          setTimeout(() => {\r\n            this.frame()\r\n          }, 1000/this.props.fps)\r\n        }\r\n        else {\r\n          //console.log(this.state.actualPath, this.state.points)\r\n          this.setState({stop: true})\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  render () {\r\n    const SVGprops = {\r\n      fill: 'transparent',\r\n      strokeWidth: '2px',\r\n      strokeLinejoin: 'round',\r\n      strokeLinecap: 'round'\r\n    }\r\n    return(\r\n      <div className='spirograph'>\r\n        <div className='points-info'>{`${this.state.actualPath.d.length - 1} / ${this.state.samples}`}</div>\r\n        <div className='draw-container'>\r\n          <svg viewBox={`0 0 ${canvasLength} ${canvasLength}`}>\r\n            {this.state.oldPaths.length > 0\r\n            ? this.state.oldPaths.map((o) => <path\r\n                key={o.id}\r\n                d={o.d.join(\"\")}\r\n                stroke={o.color}\r\n                {...SVGprops}\r\n              />)\r\n            : null}\r\n            {this.state.actualPath.d.length > 0\r\n            ? <path\r\n                key={this.state.actualPath.id}\r\n                d={this.state.actualPath.d.join(\"\")}\r\n                stroke={this.state.actualPath.color}\r\n                {...SVGprops}\r\n              />\r\n            : null}\r\n          </svg>\r\n          {/* <div className='container-disc'>\r\n            <div className='disc'\r\n              style={{\r\n                width: this.props.discRadius,\r\n                height: this.props.discRadius\r\n              }}\r\n            ></div>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Spirograph, { getMaxPoints, getMaxPointsXlap, getDiscRadius } from './Spirograph'\r\nimport Slider, { Range } from 'rc-slider'\r\nimport Tooltip from 'rc-tooltip'\r\nimport Constants from './Constants'\r\nimport 'rc-slider/assets/index.css'\r\n\r\nconst Handle = Slider.Handle;\r\n\r\nconst handle = (props) => {\r\n  const { value, dragging, index, ...restProps } = props;\r\n  return (\r\n    <Tooltip\r\n      prefixCls=\"rc-slider-tooltip\"\r\n      overlay={value}\r\n      visible={dragging}\r\n      placement=\"top\"\r\n      key={index}\r\n    >\r\n      <Handle value={value} {...restProps} />\r\n    </Tooltip>\r\n  )\r\n}\r\n\r\nconst samplesHandle = (props) => {\r\n  const { value, dragging, index, ...restProps } = props;\r\n  return (\r\n    <Tooltip\r\n      prefixCls=\"rc-slider-tooltip\"\r\n      overlay={Constants.samplesMarks[value]}\r\n      visible={dragging}\r\n      placement=\"top\"\r\n      key={index}\r\n    >\r\n      <Handle value={value} {...restProps} />\r\n    </Tooltip>\r\n  )\r\n}\r\n\r\nconst initialState = {\r\n  containerRadius: 500,\r\n  discRadius: 370,\r\n  holeDistance: 142,\r\n  samples: [1, 7],\r\n  pointsXlap: 10,\r\n  maxPointsXlap: 45,\r\n  fps: 45,\r\n  parametrization: 2,\r\n  hue: 80,\r\n  luminosity: 50,\r\n  discRadiusMarks: {250: 250},\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      ...initialState,\r\n      SpriographProps: {...initialState},\r\n      cleanInterruptor: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.changeSamples(this.state.samples)\r\n  }\r\n\r\n  apply () {\r\n    this.setState({\r\n      SpriographProps: {\r\n        containerRadius: this.state.containerRadius,\r\n        discRadius: this.state.discRadius,\r\n        holeDistance: this.state.holeDistance,\r\n        pointsXlap: this.state.pointsXlap,\r\n        fps: this.state.fps,\r\n        parametrization: this.state.parametrization,\r\n        hue: this.state.hue,\r\n        luminosity: this.state.luminosity\r\n      }\r\n    })\r\n  }\r\n\r\n  getSamplesMark (values) {\r\n    return [Constants.samplesMarks[values[0]], Constants.samplesMarks[values[1]]]\r\n  }\r\n\r\n  changeSamples (values) {\r\n    const maxPointsXlap = getMaxPointsXlap(this.getSamplesMark(values)[1])\r\n    this.setState({samples: values, maxPointsXlap}, () => {\r\n      if (this.state.pointsXlap > maxPointsXlap) {\r\n        this.changePointsXlap(maxPointsXlap)\r\n      }\r\n      else {\r\n        this.changeDiscRadiusMarks(getDiscRadius(this.getSamplesMark(values), this.state.pointsXlap, this.state.containerRadius))\r\n      }\r\n    })\r\n  }\r\n\r\n  changeContainerRadius (value) {\r\n    this.setState({containerRadius: value},\r\n      this.changeDiscRadiusMarks(getDiscRadius(this.getSamplesMark(this.state.samples), this.state.pointsXlap, value)))\r\n  }\r\n\r\n  changePointsXlap (value) {\r\n    this.setState({pointsXlap: value},\r\n      () => this.changeDiscRadiusMarks(getDiscRadius(this.getSamplesMark(this.state.samples), value, this.state.containerRadius))\r\n    )\r\n  }\r\n\r\n  changeDiscRadiusMarks (values) {\r\n    const valueFound = values.find ((v) => v >= this.state.discRadius)\r\n    if (valueFound !== this.state.discRadius) {\r\n      this.changeDiscRadius(valueFound || values[values.length])\r\n    }\r\n    const marks = {}\r\n    values.forEach((v) => marks[v] = v)\r\n    this.setState({discRadiusMarks: marks})\r\n  }\r\n\r\n  changeDiscRadius (value) {\r\n    const maxHoleDistance = 500 - (this.state.containerRadius - this.state.discRadius)\r\n    if (this.state.holeDistance > maxHoleDistance) {\r\n      this.changeHoleDistance(maxHoleDistance)\r\n    }\r\n    this.setState({discRadius: value})\r\n  }\r\n\r\n  changeHoleDistance (value) {\r\n    this.setState({holeDistance: value})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='app'>\r\n        <div className=\"control-panel\">\r\n          <div>\r\n            Parametrization: {Constants.parametrizationMarks[this.state.parametrization]}\r\n            <Slider\r\n              defaultValue = {this.state.parametrization}\r\n              min={1}\r\n              max={2}\r\n              marks={Constants.parametrizationMarks}\r\n              onAfterChange={(value) => this.setState({parametrization: value})}\r\n            />\r\n          </div>\r\n          <div>\r\n            Container Radius: {this.state.containerRadius}\r\n            <Slider\r\n              defaultValue = {this.state.containerRadius}\r\n              min={Constants.minValues.containerRadius}\r\n              max={Constants.maxValues.containerRadius}\r\n              handle={handle}\r\n              onAfterChange={(value) => this.changeContainerRadius(value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            Samples: {this.getSamplesMark(this.state.samples).join(\" - \")}\r\n            <Range\r\n              className=\"samplesSelectRange\"\r\n              defaultValue = {this.state.samples}\r\n              min={Constants.minValues.samples}\r\n              max={Constants.maxValues.samples}\r\n              step={null}\r\n              marks={Constants.samplesMarks}\r\n              handle={samplesHandle}\r\n              onAfterChange={(values) => this.changeSamples(values)}\r\n            />\r\n          </div>\r\n          <div>\r\n            Points per lap: {this.state.pointsXlap}\r\n            <Slider\r\n              value = {this.state.pointsXlap}\r\n              min={1}\r\n              max={this.state.maxPointsXlap}\r\n              handle={handle}\r\n              onChange={(value) => this.setState({pointsXlap: value})}\r\n              onAfterChange={(value) => this.changePointsXlap(value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            Disc Radius: {this.state.discRadius}\r\n            <Slider\r\n              value = {this.state.discRadius}\r\n              min={Constants.minValues.discRadius}\r\n              max={this.state.containerRadius - 1}\r\n              step={null}\r\n              marks={this.state.discRadiusMarks}\r\n              handle={handle}\r\n              onChange={(value) => this.changeDiscRadius(value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            Hole distance: {this.state.holeDistance}\r\n            <Slider\r\n              value = {this.state.holeDistance}\r\n              min={0}\r\n              max={500 - (this.state.containerRadius - this.state.discRadius)}\r\n              handle={handle}\r\n              onChange={(value) => this.changeHoleDistance(value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            Fps: {this.state.fps}\r\n            <Slider\r\n              defaultValue = {this.state.fps}\r\n              min={1}\r\n              max={45}\r\n              onAfterChange={(value) => this.setState({fps: value})}\r\n              handle={handle}\r\n            />\r\n          </div>\r\n          <div>\r\n            <div className='color' style={{\r\n              backgroundColor: `hsl(${this.state.hue}, 100%, ${this.state.luminosity}%)`,\r\n              color: `hsl(${(this.state.hue + 179)%358}, 100%, ${100 - this.state.luminosity}%)`\r\n            }}>Color:</div>\r\n            <Slider\r\n              defaultValue = {this.state.hue}\r\n              min={0}\r\n              max={357}\r\n              onChange={(value) => this.setState({hue: value})}\r\n            />\r\n            <Slider\r\n              defaultValue = {this.state.luminosity}\r\n              min={0}\r\n              max={100}\r\n              onChange={(value) => this.setState({luminosity: value})}\r\n            />\r\n          </div>\r\n          <button onClick={() => this.setState({cleanInterruptor: !this.state.cleanInterruptor})}>Clean</button>\r\n          <button onClick={() => this.apply()}>apply</button>\r\n        </div>\r\n        <div className=\"spirograph-container\">\r\n          <Spirograph\r\n            cleanInterruptor={this.state.cleanInterruptor}\r\n            {...this.state.SpriographProps}\r\n          />\r\n        </div>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}