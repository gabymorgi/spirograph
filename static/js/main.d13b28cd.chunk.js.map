{"version":3,"sources":["Spirograph.js","App.js","serviceWorker.js","index.js"],"names":["containerRadio","getMaxPoints","secXlap","fps","discRadio","disc","gcd","a","b","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","anglexStep","Math","PI","state","points","d","angleSpirograph","angleDisc","containerCenter","discCenter","angleDiscXstep","persistence","stopAtTheEnd","stop","frame","prevProps","_this2","changed","holeDistance","keys","length","start","setState","objectSpread","point","slice","shift","push","concat","x","y","parametrization","Qx","Qy","_this3","_this$state","Xcenter","cos","Ycenter","sin","Xhole","Yhole","addPoint","floor","first","last","setTimeout","react_default","createElement","className","viewBox","join","fill","strokeWidth","stroke","strokeLinejoin","strokeLinecap","React","Component","Handle","Slider","handle","value","dragging","index","restProps","objectWithoutProperties","rc_tooltip_es","prefixCls","overlay","visible","placement","key","assign","persistenceMarks","10","100","1000","persistenceMax","getMaxPointsLabel","changeHoleDistance","maxPoints","marks","i","j","es","defaultValue","min","max","onAfterChange","changeDiscRadio","step","Spirograph_App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d13b28cd.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Spirograph.css'\r\n\r\nconst containerRadio = 500\r\n\r\nconst gcd = (a,b) => {\r\n  return b ? gcd(b, a%b) : a;\r\n}\r\n\r\nconst getLaps = (cont, disc) => {\r\n  const divisor = gcd(cont,disc);\r\n  return disc/divisor;\r\n}\r\n\r\nexport const getMaxPoints = (secXlap, fps, discRadio) => {\r\n  return secXlap*fps*getLaps(containerRadio, discRadio) + 1\r\n}\r\n\r\nexport default class App extends React.Component {\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    const anglexStep = 360/(props.secXlap*props.fps) * (Math.PI/180)\r\n    this.state = {\r\n      points: [],\r\n      d: [],\r\n      angleSpirograph: 0,\r\n      angleDisc: 0,\r\n      containerCenter: containerRadio,\r\n      anglexStep,\r\n      discCenter: containerRadio - this.props.discRadio,\r\n      angleDiscXstep: anglexStep * containerRadio / this.props.discRadio,\r\n      persistence: this.props.stopAtTheEnd\r\n        ? getMaxPoints(props.secXlap, props.fps, containerRadio, props.discRadio)\r\n        : this.props.persistence,\r\n      stop: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.frame()\r\n  }\r\n\r\n  componentDidUpdate (prevProps) {\r\n    let changed = {}\r\n    if (prevProps.discRadio !== this.props.discRadio) {\r\n      const { discRadio } = this.props\r\n      changed.discCenter= containerRadio - discRadio\r\n      changed.angleDiscXstep= this.state.anglexStep * containerRadio / discRadio\r\n    }\r\n    if (this.props.secXlap !== prevProps.secXlap || this.props.fps !== prevProps.fps) {\r\n      const anglexStep = 360/(this.props.secXlap*this.props.fps) * (Math.PI/180)\r\n      changed.anglexStep = anglexStep\r\n      changed.angleDiscXstep = anglexStep * containerRadio / this.props.discRadio\r\n      \r\n    }\r\n    if (this.props.stopAtTheEnd !== prevProps.stopAtTheEnd || this.props.holeDistance !== prevProps.holeDistance) {\r\n      // force a change\r\n      changed.persistence = true\r\n    }\r\n\r\n    if (Object.keys(changed).length > 0) {\r\n      changed.persistence = this.props.stopAtTheEnd\r\n        ? getMaxPoints(this.props.secXlap, this.props.fps, this.props.discRadio, containerRadio)\r\n        : this.props.persistence\r\n      changed.stop= false\r\n      const start = this.state.stop ? () => {\r\n        this.frame()\r\n      } : null\r\n      this.setState({...changed}, start)\r\n    }\r\n  }\r\n\r\n  addPoint (point) {\r\n    \r\n    const points = this.state.points.slice()\r\n    let d = this.state.d.slice()\r\n    if (points.length > this.props.persistence) {\r\n      points.shift()\r\n      points.shift()\r\n      d.shift()\r\n      d.shift()\r\n    }\r\n    points.push(point)\r\n    // check if enough points\r\n    d[0] = `M ${points[0].x},${points[0].y} `\r\n    switch (this.props.parametrization) {\r\n      case 2:\r\n        d.push(`L ${point.x},${point.y} `)\r\n        break\r\n      case 3:\r\n        const Qx = 2*points[points.length - 2].x - 0.5*point.x - 0.5*points[points.length - 3].x\r\n        const Qy = 2*points[points.length - 2].y - 0.5*point.y - 0.5*points[points.length - 3].y\r\n        d.push(`Q ${Qx},${Qy} ${point.x},${point.y} `)\r\n        break\r\n      default: break\r\n    }\r\n    this.setState({points, d})\r\n  }\r\n\r\n  frame () {\r\n    const { angleSpirograph, containerCenter, discCenter, angleDisc, angleDiscXstep, anglexStep } = this.state\r\n    const { holeDistance } = this.props\r\n    const Xcenter = containerCenter + Math.cos(angleSpirograph)*discCenter;\r\n    const Ycenter = containerCenter - Math.sin(angleSpirograph)*discCenter;\r\n    const Xhole = Xcenter + Math.cos(-angleDisc)*holeDistance;\r\n    const Yhole = Ycenter - Math.sin(-angleDisc)*holeDistance;\r\n    this.addPoint({x: Math.floor(Xhole), y: Math.floor(Yhole)})\r\n    this.setState({\r\n      angleSpirograph: angleSpirograph + anglexStep,\r\n      angleDisc: angleDisc + angleDiscXstep},\r\n      () => {\r\n        let frame = true\r\n        if (this.props.stopAtTheEnd) {\r\n          if (this.state.points.length === this.state.persistence) {\r\n            const first = this.state.points[0]\r\n            const last = this.state.points[this.state.points.length - 1]\r\n            if (first.x === last.x && first.y === last.y) {\r\n              frame = false\r\n            }\r\n          }\r\n        }\r\n        \r\n        if (frame) {\r\n          setTimeout(() => {\r\n            this.frame()\r\n          }, 1000/this.props.fps)\r\n        }\r\n        else {\r\n          this.setState({stop: true})\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  render () {\r\n    return(\r\n      <div className='spirograph'>\r\n        {this.state.d\r\n        ? <svg viewBox={`0 0 ${containerRadio*2} ${containerRadio*2}`}>\r\n          <path d={this.state.d.join()}\r\n          fill='transparent' strokeWidth='2px' stroke=\"red\" strokeLinejoin='round' strokeLinecap='round'/>\r\n        </svg>\r\n        : null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport Spirograph, { getMaxPoints } from './Spirograph'\nimport Slider from 'rc-slider'\nimport Tooltip from 'rc-tooltip'\nimport 'rc-slider/assets/index.css'\n\nconst parametrizationMarks = {\n  2: 'linear',\n  3: 'quadratic',\n  4: 'cubic'\n}\n\nconst Handle = Slider.Handle;\n\nconst handle = (props) => {\n  const { value, dragging, index, ...restProps } = props;\n  return (\n    <Tooltip\n      prefixCls=\"rc-slider-tooltip\"\n      overlay={value}\n      visible={dragging}\n      placement=\"top\"\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n};\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      discRadio: 74,\n      holeDistance: 74,\n      persistence: 1000,\n      secXlap: 1,\n      fps: 60,\n      parametrization: 2,\n      persistenceMarks: {10: 1, 100: 2, 1000: '∞'},\n      persistenceMax: 100\n    }\n  }\n\n  componentDidMount() {\n    this.getMaxPointsLabel()\n  }\n\n  changeDiscRadio (value) {\n    if (this.state.holeDistance > value) {\n      this.changeHoleDistance(value)\n    }\n    this.setState({discRadio: value}, () => this.getMaxPointsLabel())\n  }\n\n  changeHoleDistance (value) {\n    this.setState({holeDistance: value})\n  }\n\n  getMaxPointsLabel () {\n    const maxPoints = getMaxPoints(this.state.secXlap, this.state.fps, this.state.discRadio)\n    \n    let marks = {}\n    for (let i = 10, j=1; i < maxPoints; i*=10, j++) {\n      marks[i] = j\n    }\n    marks[maxPoints] = '∞'\n    const persistence = this.state.persistence > maxPoints ? maxPoints : this.state.persistence\n    this.setState({persistenceMarks: marks, persistenceMax: maxPoints, persistence})\n  }\n\n  render() {\n    return (\n      <div className='app'>\n        <div className=\"control-panel\">\n          <div>\n            Disc Radio: {this.state.discRadio}\n            <Slider\n              defaultValue = {this.state.discRadio}\n              min={1}\n              max={500}\n              handle={handle}\n              onAfterChange={(value) => this.changeDiscRadio(value)}\n            />\n          </div>\n          <div>\n            Hole distance: {this.state.holeDistance}\n            <Slider\n              defaultValue = {this.state.holeDistance}\n              min={0}\n              max={this.state.discRadio}\n              handle={handle}\n              onAfterChange={(value) => this.changeHoleDistance(value)}\n            />\n          </div>\n          <div>\n            Fps: {this.state.fps}\n            <Slider\n              defaultValue = {this.state.fps}\n              min={1}\n              max={60}\n              onAfterChange={(value) => this.setState({fps: value}, () => this.getMaxPointsLabel())}\n              handle={handle}\n            />\n          </div>\n          <div>\n            Seconds per lap: {this.state.secXlap}\n            <Slider\n              defaultValue = {this.state.secXlap}\n              min={0.1}\n              max={6}\n              step={0.1}\n              handle={handle}\n              onAfterChange={(value) => this.setState({secXlap: value}, () => this.getMaxPointsLabel())}\n            />\n          </div>\n          <div>\n            Persistence: {this.state.persistence}\n            <Slider\n              defaultValue = {this.state.persistence}\n              min={1}\n              max={this.state.persistenceMax}\n              marks={this.state.persistenceMarks}\n              step={null}\n              handle={handle}\n              onAfterChange={(value) => this.setState({persistence: value})}\n            />\n          </div>\n          {/**\n          <div>\n            Parametrization: {parametrizationMarks[this.state.parametrization]}\n            <Slider\n              defaultValue = {this.state.parametrization}\n              min={2}\n              max={4}\n              marks={parametrizationMarks}\n              onAfterChange={(value) => this.setState({parametrization: value})}\n            />\n          </div>\n           */}\n          \n        </div>\n        <div className=\"spirograph-container\">\n          <Spirograph\n            discRadio = {this.state.discRadio}\n            holeDistance = {this.state.holeDistance}\n            persistence={this.state.persistence}\n            stopAtTheEnd={this.state.persistenceMarks[this.state.persistence] === '∞'}\n            fps = {this.state.fps}\n            secXlap={this.state.secXlap}\n            parametrization={this.state.parametrization}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}